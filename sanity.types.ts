/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  name?: string;
  email?: string;
  image?: string;
  role?: string;
};

export type Role = {
  _id: string;
  _type: "role";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  code?: string;
};

export type RatingKey = {
  _id: string;
  _type: "ratingKey";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  key?: string;
  slug?: Slug;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  listing?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "listing";
  };
  listingProvider?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  createdAt?: string;
  expiresAt?: string;
  isUsed?: boolean;
};

export type Rating = {
  _id: string;
  _type: "rating";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  rating?: number;
  review?: string;
  listing?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "listing";
  };
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "listing";
  };
  createdAt?: string;
};

export type Category = "Common Tools" | "Power Tools" | "Electric Tools" | "Carpentry Tools" | "Gardening Tools" | "Plumbing Tools" | "Measuring Tools" | "Safety Tools" | "Other Tools";

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  name?: string;
  email?: string;
  image?: string;
  roles?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "role";
  }>;
  listingRatings?: Array<{
    listing?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "listing";
    };
    averageRating?: number;
    totalRatings?: number;
    _key: string;
  }>;
};

export type Listing = {
  _id: string;
  _type: "listing";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  publishedAt?: string;
  body?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | User | Role | RatingKey | Rating | Category | Author | Listing | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: LISTINGS_QUERY
// Query: *[_type == "listing" && defined(slug.current) &&     (      !defined($search) ||       title match $search ||       category match $search ||       author->name match $search    ) &&     (      !defined($category) ||       category match $category    )  ] | order(_createdAt desc) {    _id,    _type,    title,    slug,    _createdAt,    author -> {      _id,      name,      image,      email    },    description,    category,    image,    condition,    price,    ratePeriod,    contact,    toolDetails,    deleteToken,    "ratings": *[_type == "rating" && service._ref == ^._id] {      _id,      rating,      review,      createdAt,      user-> {        _id,        name,        image      }    }  }
export type LISTINGS_QUERYResult = Array<{
  _id: string;
  _type: "listing";
  title: string | null;
  slug: Slug | null;
  _createdAt: string;
  author: null;
  description: string | null;
  category: null;
  image: null;
  condition: null;
  price: null;
  ratePeriod: null;
  contact: null;
  toolDetails: null;
  deleteToken: null;
  ratings: Array<never>;
}>;
// Variable: LISTINGS_BY_AUTHOR_QUERY
// Query: *[_type == "listing" && author._ref == $authorId] | order(_createdAt desc){  _id,  title,  description,  category,  condition,  author->{    _id,    name,    image,    email  },  slug,  _createdAt,  ratings,  image,  deleteToken,  // Make sure this is included if you need it for mutations  toolDetails,  price,  ratePeriod,  contact}
export type LISTINGS_BY_AUTHOR_QUERYResult = Array<{
  _id: string;
  title: string | null;
  description: string | null;
  category: null;
  condition: null;
  author: null;
  slug: Slug | null;
  _createdAt: string;
  ratings: null;
  image: null;
  deleteToken: null;
  toolDetails: null;
  price: null;
  ratePeriod: null;
  contact: null;
}>;
// Variable: AUTHOR_BY_GOOGLE_ID_QUERY
// Query: [_type == "author" && email == $email][0]{      _id,      id,      name,      email,      image,      "roles": roles[]->{      code      }    }
export type AUTHOR_BY_GOOGLE_ID_QUERYResult = null;
// Variable: PLAYLIST_BY_SLUG_QUERY
// Query: *[_type == "playlist" && slug.current == $slug][0]{        _id,        title,        slug,        description,        category,        image,        toolDescription,        "ratings": *[_type == "rating" && listing._ref == ^._id] {          _id,          rating,          review,          createdAt,          user-> {            _id,            name,            image          }        },        "select": select[]->{          _id,          _createdAt,          title,          slug,          description,          category,          image,          "ratings": *[_type == "rating" && listing._ref == ^._id] {          _id,          rating,          review,          createdAt,          user-> {            _id,            name,            image          }        },          author-> {            _id,            name,            slug,            image,            email          }        }      }
export type PLAYLIST_BY_SLUG_QUERYResult = null;

// Source: ./app/(root)/filtered-listings/page.tsx
// Variable: listingsQuery
// Query: *[_type == "listing" && (    title match $query + "*" ||    description match $query + "*" ||    tags[]->name match $query + "*"  )] {    _id,    _createdAt,    title,    description,    slug,    image,    category,    condition,    price,    contact,    toolDetails,    author,    "slug": slug.current,  }
export type ListingsQueryResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  description: string | null;
  slug: string | null;
  image: null;
  category: null;
  condition: null;
  price: null;
  contact: null;
  toolDetails: null;
  author: null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"listing\" && defined(slug.current) && \n    (\n      !defined($search) || \n      title match $search || \n      category match $search || \n      author->name match $search\n    ) && \n    (\n      !defined($category) || \n      category match $category\n    )\n  ] | order(_createdAt desc) {\n    _id,\n    _type,\n    title,\n    slug,\n    _createdAt,\n    author -> {\n      _id,\n      name,\n      image,\n      email\n    },\n    description,\n    category,\n    image,\n    condition,\n    price,\n    ratePeriod,\n    contact,\n    toolDetails,\n    deleteToken,\n    \"ratings\": *[_type == \"rating\" && service._ref == ^._id] {\n      _id,\n      rating,\n      review,\n      createdAt,\n      user-> {\n        _id,\n        name,\n        image\n      }\n    }\n  }": LISTINGS_QUERYResult;
    "*[_type == \"listing\" && author._ref == $authorId] | order(_createdAt desc){\n  _id,\n  title,\n  description,\n  category,\n  condition,\n  author->{\n    _id,\n    name,\n    image,\n    email\n  },\n  slug,\n  _createdAt,\n  ratings,\n  image,\n  deleteToken,  // Make sure this is included if you need it for mutations\n  toolDetails,\n  price,\n  ratePeriod,\n  contact\n}": LISTINGS_BY_AUTHOR_QUERYResult;
    "[_type == \"author\" && email == $email][0]{\n      _id,\n      id,\n      name,\n      email,\n      image,\n      \"roles\": roles[]->{\n      code\n      }\n    }": AUTHOR_BY_GOOGLE_ID_QUERYResult;
    "\n      *[_type == \"playlist\" && slug.current == $slug][0]{\n        _id,\n        title,\n        slug,\n        description,\n        category,\n        image,\n        toolDescription,\n        \"ratings\": *[_type == \"rating\" && listing._ref == ^._id] {\n          _id,\n          rating,\n          review,\n          createdAt,\n          user-> {\n            _id,\n            name,\n            image\n          }\n        },\n        \"select\": select[]->{\n          _id,\n          _createdAt,\n          title,\n          slug,\n          description,\n          category,\n          image,\n          \"ratings\": *[_type == \"rating\" && listing._ref == ^._id] {\n          _id,\n          rating,\n          review,\n          createdAt,\n          user-> {\n            _id,\n            name,\n            image\n          }\n        },\n          author-> {\n            _id,\n            name,\n            slug,\n            image,\n            email\n          }\n        }\n      }": PLAYLIST_BY_SLUG_QUERYResult;
    "\n  *[_type == \"listing\" && (\n    title match $query + \"*\" ||\n    description match $query + \"*\" ||\n    tags[]->name match $query + \"*\"\n  )] {\n    _id,\n    _createdAt,\n    title,\n    description,\n    slug,\n    image,\n    category,\n    condition,\n    price,\n    contact,\n    toolDetails,\n    author,\n    \"slug\": slug.current,\n  }\n": ListingsQueryResult;
  }
}
